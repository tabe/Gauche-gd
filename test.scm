;;;
;;; test graphics.gd
;;;

(use gauche.test)

(test-start "graphics.gd")
(use graphics.gd)
(test-module 'graphics.gd)

(test-section "constant")
(define-syntax test*-constant
  (syntax-rules ()
	((_ (name value) ...)
	 (begin
	   (test* (symbol->string 'name) name value)
	   ...))))
(test*-constant
 (gdMaxColors        256)
 (gdAlphaMax         127)
 (gdAlphaOpaque      0)
 (gdAlphaTransparent 127)
 (gdRedMax           255)
 (gdGreenMax         255)
 (gdBlueMax          255)
 (gdStyled           -2)
 (gdBrushed          -3)
 (gdStyledBrushed    -4)
 (gdTiled            -5)
 (gdTransparent      -6)
 (gdAntiAliased      -7)
 (gdFTEX_LINESPACE   1)
 (gdFTEX_CHARMAP     2)
 (gdFTEX_RESOLUTION  4)
 (gdFTEX_DISABLE_KERNING 8)
 (gdFTEX_XSHOW       16)
 (gdFTEX_FONTPATHNAME 32)
 (gdFTEX_FONTCONFIG  64)
 (gdFTEX_RETURNFONTPATHNAME 128)
 (gdFTEX_Unicode     0)
 (gdFTEX_Shift_JIS   1)
 (gdFTEX_Big5        2)
 (gdArc              0)
 (gdPie              0)
 (gdChord            1)
 (gdNoFill           2)
 (gdEdged            4)
 (GD2_CHUNKSIZE      128)
 (GD2_CHUNKSIZE_MIN  64)
 (GD2_CHUNKSIZE_MAX  4096)
 (GD2_VERS           2)
 (GD2_ID             "gd2")
 (GD2_FMT_RAW        1)
 (GD2_FMT_COMPRESSED 2)
 (GD_CMP_IMAGE       1)
 (GD_CMP_NUM_COLORS  2)
 (GD_CMP_COLOR       4)
 (GD_CMP_SIZE_X      8)
 (GD_CMP_SIZE_Y      16)
 (GD_CMP_TRANSPARENT 32)
 (GD_CMP_BACKGROUND  64)
 (GD_CMP_INTERLACE   128)
 (GD_CMP_TRUECOLOR   256)
 (GD_RESOLUTION      96)
 )

(test-section "color")
(define color #x789abcde)
(test* "gd-true-color-get-alpha" #x78 (gd-true-color-get-alpha color))
(test* "gd-true-color-get-red"   #x9a (gd-true-color-get-red   color))
(test* "gd-true-color-get-green" #xbc (gd-true-color-get-green color))
(test* "gd-true-color-get-blue"  #xde (gd-true-color-get-blue  color))
(test* "gd-alpha-blend" 33440629 (gd-alpha-blend #x11ee3355 #x09ff4477))

(test-section "gdImage")
(define im (gd-image-create 240 240))
(test* "gd-image-create" #t (is-a? im <gd-image>))
(define im (gd-image-create-palette 240 240))
(test* "gd-image-create-palette" #t (is-a? im <gd-image>))
(gd-image-destroy im)
(gd-image-destroy im) ;; expected to be repeated safely
(define im (gd-image-create-true-color 240 240))
(test* "gd-image-create-true-color" #t (is-a? im <gd-image>))

(define im (gd-image-create-from-gif "test/screen.gif"))
(test* "gd-image-create-from-gif" #t (is-a? im <gd-image>))
(test* "get-width"  776 (get-width im))
(test* "get-height" 592 (get-height im))
(test* "gd-image-get-pixel" 255 (gd-image-get-pixel im 300 400))
(test* "gd-image-get-true-color-pixel" 16711676 (gd-image-get-true-color-pixel im 300 400))
(define-method resize ((im <gd-image>) (sx <integer>) (sy <integer>))
  (let ((dst (gd-image-create-true-color sx sy)))
	(gd-image-copy-resampled dst im 0 0 0 0 sx sy (gd-image-sx im) (gd-image-sy im))
	dst))
(define im-small (resize im 97 74))
(save-as im-small (if (memq 'png *gd-features*)
					  "test/screen-thumb.png"
					  "test/screen-thumb.gif"))
(destroy! im-small)
(define im-empty (gd-image-create-from-jpeg "test/empty.jpg")) ;; may put a message
(test* "gd-image-create-from-jpeg" #f im-empty)

(define im0 (gd-image-create 320 320))
(define white  (gd-image-color-allocate im0 #xff #xff #xff))
(define green  (gd-image-color-allocate im0 #x00 #xff #x00))
(define color0 (gd-image-color-resolve im0 #x56 #x78 #x9a))
(define color1 (gd-image-color-resolve im0 #x78 #x9a #x56))
(define color2 (gd-image-color-resolve im0 #x78 #xbc #xde))
(gd-image-polygon im0
				  '((150 . 20)
					(170 . 45)
					(200 . 70)
					(160 . 130)
					(160 . 90)
					(130 . 75))
				  6
				  green)
(gd-image-line im0 0 0 100 200 color0)
(gd-image-rectangle im0 100 200 140 100 color1)
(gd-image-filled-rectangle im0 110 190 130 110 color2)
(gd-image-set-clip im0 10 20 450 300)
(receive (x1 y1 x2 y2)
	(gd-image-get-clip im0)
  (test* "gd-image-get-clip" '(10 20 319 300) (list x1 y1 x2 y2)))
(test* "gd-image-bounds-safe" 1 (gd-image-bounds-safe im0 200 300))
(test* "gd-font-cache-setup" 0 (gd-font-cache-setup))
(gd-font-cache-shutdown)
(gd-free-font-cache)
(test* "gd-ft-use-font-config"
	   (if (memq 'fontconfig *gd-features*) 1 0)
	   (gd-ft-use-font-config 1))
(gd-image-interlace im0 1)
(gd-image-arc im0 160 120 40 40 0 270 green)
(save-as im0 (if (memq 'png *gd-features*)
				 "test/im0.png"
				 "test/im0.gif"))
(define im1 (gd-image-square-to-circle im0 300))
(save-as im1 (if (memq 'png *gd-features*)
				 "test/im1.png"
				 "test/im1.gif"))

(format #t "*gd-features*: ~s\n" *gd-features*)

(test-end)

;; Local variables:
;; mode: scheme
;; end:
